/*!
 *  Bayrell Runtime Library
 *
 *  (c) Copyright 2016-2023 "Ildar Bikmamatov" <support@bayrell.org>
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

namespace Runtime.ORM;

use Runtime.BaseStruct;
use Runtime.ORM.Cursor;
use Runtime.ORM.Query;


class Connection
{
	protected string name = "";
	
	
	/**
	 * Constructor
	 */
	public void constructor(string name)
	{
		this.name = name;
	}
	
	
	/**
	 * Connect
	 */
	Connection connect()
	{
	}
	
	
	/**
	 * Check is connected
	 */
	bool isConnected() => false;
	
	
	/**
	 * Returns connection name
	 */
	bool getName() => this.name;
	
	
	/**
	 * Create new cursor
	 */
	Cursor createCursor() => new Cursor();
	
	
	/**
	 * Execute cursor
	 */
	async Cursor executeQuery(Query q) => null;
	
	
	/**
	 * Insert query
	 */
	async var insert(string table_name, Dict data, bool get_last_id = true)
	{
		var last_id = null;
		
		Query q = new Query()
			|> .insert(table_name)
			|> .values(data)
		;
		
		Cursor c = await this.executeQuery(q);
		
		if (get_last_id)
		{
			last_id = await c.lastInsertId();
		}
		
		await c.close();
		
		return last_id;
	}
	
	
	/**
	 * Update query
	 */
	async void update(string table_name, Collection filter, Dict update)
	{
		Query q = new Query()
			|> .update(table_name)
			|> .values(data)
			|> .filter(filter)
		;
		
		Cursor c = await this.executeQuery(q);
		await c.close();
	}
	
	
	/**
	 * Delete item
	 */
	async void delete(string table_name, Collection filter)
	{
		Query q = new Query()
			|> .delete(table_name)
			|> .filter(filter)
		;
		
		Cursor c = await this.executeQuery(q);
		await c.close();
	}
	
	
	/**
	 * Begin transaction
	 */
	async void beginTransaction()
	{
	}
	
	
	/**
	 * Commit
	 */
	async void commit()
	{
	}
	
	
	/**
	 * rollBack
	 */
	async void rollBack()
	{
	}
	
	
	/**
	 * Convert item from database
	 */
	var fromDatabase(BaseStruct annotation, Dict item, string field_name) => item;
	
	
	/**
	 * Convert item to database
	 */
	var toDatabase(BaseStruct annotation, Dict item, string field_name) => item;
	
}