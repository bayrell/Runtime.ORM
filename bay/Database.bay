/*!
 *  Bayrell Runtime Library
 *
 *  (c) Copyright 2016-2023 "Ildar Bikmamatov" <support@bayrell.org>
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

namespace Runtime.ORM;

use Runtime.ORM.Connection;
use Runtime.ORM.Cursor;
use Runtime.ORM.Provider;
use Runtime.ORM.Query;


class Database
{
	
	/**
	 * Returns connection
	 */
	static Connection getConnection(string name = "default")
	{
		if (name == "") name = "default";
		
		Provider provider = @.provider(classof Provider);
		Connection conn = provider.getConnection(name);
		return conn;
	}
	
	
	/**
	 * Returns new Query instance
	 */
	static Query query()
	{
		return new Query();
	}
	
	
	/**
	 * Returns connection name
	 */
	static string getConnectionName(Query q, Dict params = null)
	{
		string conn_name = params["name"];
		if (not conn_name and q._db_params)
		{
			conn_name = q._db_params["name"];
		}
		return conn_name;
	}
	
	
	/**
	 * Execute query
	 */
	static async Cursor execute(Query q, Dict params = null)
	{
		string conn_name = static::getConnectionName(q, params);
		Connection conn = static::getConnection(conn_name);
		return await conn.executeQuery(q, params);
	}
	static async Cursor executeQuery(Query q, Dict params = null)
		=> await static::execute(q, params)
	;
	
	
	/**
	 * Returns sql
	 */
	static async string getSQL(Query q, Dict params = null)
	{
		string sql = "";
		string conn_name = static::getConnectionName(q, params);
		Connection conn = static::getConnection(conn_name);
		list res = await conn.buildQuery(q);
		if (res)
		{
			sql = conn.getSQL(res[0], res[1]);
		}
		return sql;
	}
	
	
	/**
	 * Returns sql
	 */
	static async string buildSql(Query q, Dict params = null)
	{
		string sql = "";
		string conn_name = static::getConnectionName(q, params);
		Connection conn = static::getConnection(conn_name);
		list res = await conn.buildQuery(q);
		return res;
	}
	
	
	/**
	 * Fetch all data by Query
	 */
	static async Collection fetchAll(Query q, Dict params = null)
	{
		Cursor cursor = await static::execute(q, params);
		Collection res = await cursor.fetchAll();
		await cursor.close();
		return res;
	}
	
	
	/**
	 * Fetch item by Query
	 */
	static async Dict fetch(Query q, Dict params = null)
	{
		Cursor cursor = await static::execute(q, params);
		Collection res = await cursor.fetch();
		await cursor.close();
		return res;
	}
	static async Dict fetchOne(Query q, Dict params = null) =>
		await static::fetch(q, params)
	;
	
	
	/**
	 * Insert query
	 */
	static async var insert(string table_name, Dict data, Dict params = null)
	{
		Connection conn = static::getConnection(params["name"]);
		var last_id = await conn.insert(
			table_name,
			data,
			params["get_last_id"] |> default bool true
		);
		return last_id;
	}
	
	
	/**
	 * Update query
	 */
	static async void update(string table_name, Collection filter, Dict update, Dict params = null)
	{
		Connection conn = static::getConnection(params["name"]);
		await conn.update(
			table_name,
			filter,
			update
		);
	}
	
	
	/**
	 * Delete query
	 */
	static async void delete(string table_name, Collection filter, Dict params = null)
	{
		Connection conn = static::getConnection(params["name"]);
		await conn.delete(
			table_name,
			filter
		);
	}
}