/*!
 *  Bayrell Runtime Library
 *
 *  (c) Copyright 2016-2023 "Ildar Bikmamatov" <support@bayrell.org>
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

namespace Runtime.ORM;

use Runtime.BaseObject;
use Runtime.BaseStruct;
use Runtime.ORM.Connection;
use Runtime.ORM.Database;
use Runtime.ORM.Query;
use Runtime.ORM.Annotations.AutoIncrement;
use Runtime.ORM.Annotations.BaseType;
use Runtime.ORM.Annotations.Primary;


class Relation extends BaseObject
{
	protected Map old_data = null;
	protected Map new_data = new Map;
	protected bool is_dirty = false;
	
	
	/**
	 * Returns table name
	 */
	static string getTableName() => "";
	
	
	/**
	 * Returns relation attributes
	 */
	static Collection<BaseStruct> annotations() => [];
	
	
	/**
	 * Returns true if primary key is auto increment
	 */
	static memorize bool isAutoIncrement()
	{
		Collection<BaseStruct> annotations = static::annotations();
		for (int i=0; i<annotations.count(); i++)
		{
			BaseStruct annotation = annotations[i];
			if (annotation instanceof AutoIncrement)
			{
				return true;
			}
		}
		return false;
	}
	
	
	/**
	 * To database
	 */
	pure Dict toDatabase(Connection conn, Dict data, bool is_update)
	{
		if (data == null) return null;
		
		Collection<BaseStruct> annotations = static::annotations();
		for (int i=0; i<annotations.count(); i++)
		{
			BaseStruct annotation = annotations[i];
			if (annotation instanceof BaseType)
			{
				data = annotation.toDatabase(conn, data, is_update);
			}
		}
		return data;
	}
	
	
	/**
	 * From database
	 */
	pure Dict fromDatabase(Connection conn, Dict data)
	{
		if (data == null) return null;
		
		Collection<BaseStruct> annotations = static::annotations();
		for (int i=0; i<annotations.count(); i++)
		{
			BaseStruct annotation = annotations[i];
			if (annotation instanceof BaseType)
			{
				data = annotation.fromDatabase(conn, data);
			}
		}
		return data;
	}
	
	
	/**
	 * Create Instance of class
	 */
	pure Relation newInstance(Dict data = null)
	{
		Relation instance = rtl::newInstance(static::getClassName());
		instance._setNewData(data);
		return instance;
	}
	
	
	/**
	 * Create Instance of class from database
	 */
	pure Relation newInstanceFromDatabase(Connection conn, Dict data = null)
	{
		data = static::fromDatabase(conn, data);
		data = static::newInstance(data);
		return data;
	}
	
	
	/**
	 * Convert to model
	 */
	BaseStruct toModel(string class_name) =>
		rtl::newInstance(class_name, [ this.toDict() ])
	;
	
	
	/**
	 * Convert to Dict
	 */
	Dict toDict() => this.new_data.toDict();
	
	
	/**
	 * Returns primary keys
	 */
	static memorize Collection pk()
	{
		Vector primary_keys = new Vector();
		Collection<BaseStruct> annotations = static::annotations();
		for (int i=0; i<annotations.count(); i++)
		{
			BaseStruct annotation = annotations[i];
			if (annotation instanceof Primary)
			{
				string field_name = annotation.name;
				primary_keys.pushValue(field_name);
			}
		}
		return primary_keys.toCollection();
	}
	
	
	/**
	 * Returns primary data
	 */
	static Dict getPrimaryData(Dict data)
	{
		Map primary_data = new Map();
		Collection<BaseStruct> annotations = static::annotations();
		for (int i=0; i<annotations.count(); i++)
		{
			BaseStruct annotation = annotations[i];
			if (annotation instanceof Primary)
			{
				Collection<string> keys = annotation.keys;
				for (int j=0; j<keys.count(); j++)
				{
					string field_name = keys[j];
					primary_data.setValue(field_name, data[field_name]);
				}
			}
		}
		return primary_data.toDict();
	}
	static Dict getPrimaryKey(Dict data) => static::getPrimaryData(data);
	
	
	/**
	 * Returns primary filter by data
	 */
	static Collection getPrimaryFilter(Dict data, bool use_alias)
	{
		Vector filter = new Vector();
		
		Dict pk = static::getPrimaryKey(data);
		pk.each(
			void (var value, string key) use (filter, use_alias)
			{
				if (use_alias)
				{
					filter.pushValue(["t." ~ key, "=", value]);
				}
				else
				{
					filter.pushValue([key, "=", value]);
				}
			}
		);
		
		return filter.toCollection();
	}
	
	
	/**
	 * Get updated data
	 */
	Dict getUpdatedData()
	{
		if (this.new_data == null) return {};
		
		Map res = new Map;
		
		Collection new_data_keys = this.new_data.keys();
		for (int i=0; i<new_data_keys.count(); i++)
		{
			string field_name = new_data_keys[i];
			var new_value = this.new_data[field_name];
			
			if (this.old_data == null)
			{
				res.setValue(field_name, new_value);
			}
			else
			{
				if (not this.old_data.has(field_name))
				{
					res.setValue(field_name, new_value);
				}
				else
				{
					var old_value = this.old_data[field_name];
					if (new_value != old_value)
					{
						res.setValue(field_name, new_value);
					}
				}
			}
		}
		
		return res.toDict();
	}
	
	
	/**
	 * Set new data
	 */
	protected void _setNewData(Dict data = null)
	{
		this.is_dirty = false;
		this.old_data = new Map(data);
		this.new_data = new Map(data);
		if (data == null)
		{
			this.new_data = new Map();
		}
	}
	
	
	/**
	 * Returns true if object is new
	 */
	bool isNew()
	{
		return this.old_data ? false : true;
	}
	
	
	/**
	 * Returns true if data has loaded from database
	 */
	bool isUpdate()
	{
		return this.old_data ? true : false;
	}
	
	
	/**
	 * Returns true if model is changed
	 */
	bool isDirty()
	{
		return this.is_dirty;
	}
	
	
	/**
	 * Query
	 */
	static void query() =>
		new Query()
			|> .relation(static::getClassName())
		;
	
	
	/**
	 * Select query
	 */
	static void selectQuery() =>
		static::query()
			|> .kind(Query::QUERY_SELECT)
		;
	
	
	/**
	 * Insert query
	 */
	static void insertQuery() =>
		static::query()
			|> .kind(Query::QUERY_INSERT)
		;
	
	
	/**
	 * Update query
	 */
	static void updateQuery() =>
		static::query()
			|> .kind(Query::QUERY_UPDATE)
		;
	
	
	/**
	 * Delete query
	 */
	static void deleteQuery() =>
		static::query()
			|> .kind(Query::QUERY_DELETE)
		;
	
	
	/**
	 * Find item
	 */
	async static Relation findById(string id, Connection conn, Dict params = null)
	{
		Collection pk = static::pk();
		string pk_name = pk.get(0);
		if (not pk_name) return null;
		
		Query q = new Query
			|> .select( static::getTableName() )
			|> .where(pk_name, "=", id)
		;
		
		Dict item = await conn.fetchOne(q, params);
		if (item)
		{
			item = static::newInstanceFromDatabase(conn, item);
		}
		
		return item;
	}
	
	
	/**
	 * Find item
	 */
	async static Relation findItem(Connection conn, Dict item, Dict params = null)
	{
		Vector filter = new Vector();
		Collection keys = item.keys();
		for (int i=0; i<keys.count(); i++)
		{
			string key = keys[i];
			filter.pushValue(["t." ~ key, "=", item[key]]);
		}
		
		Query q = new Query
			|> .select( static::getTableName() )
			|> .filter(filter)
			|> .limit(1)
		;
		
		Dict item = await conn.fetchOne(q, params);
		if (item)
		{
			item = static::newInstanceFromDatabase(conn, item);
		}
		
		return item;
	}
	
	
	/**
	 * Find or create
	 */
	async static Relation findOrCreate(Connection conn, Dict item)
	{
		Relation res = await static::findItem(conn, item);
		if (res) return res;
		
		res = static::newInstance(item);
		
		return res;
	}
	
	
	/**
	 * Before save
	 */
	Dict beforeSave(Dict updated_data, bool is_update) => updated_data;
	
	
	/**
	 * After save
	 */
	void afterSave(Dict updated_data, bool is_update){}
	
	
	/**
	 * Save model
	 */
	async void save(Connection conn)
	{
		bool is_update = this.isUpdate();
		Dict updated_data = this.getUpdatedData();
		updated_data = await this.beforeSave(updated_data, is_update);
		
		if (is_update)
		{
			Collection updated_data_keys = updated_data.keys();
			if (updated_data_keys.count() > 0)
			{
				Collection filter = static::getPrimaryFilter(this.old_data, false);
				if (filter.count() > 0)
				{
					Dict db_updated_data = static::toDatabase(conn, updated_data, is_update);
					await conn.update(
						static::getTableName(),
						filter,
						db_updated_data
					);
				}
				
				for (int i=0; i<updated_data_keys.count(); i++)
				{
					string field_name = updated_data_keys[i];
					this.old_data.setValue(field_name, updated_data[field_name]);
				}
			}
		}
		else
		{
			Dict db_updated_data = static::toDatabase(conn, updated_data, is_update);
			var last_id = await conn.insert(
				static::getTableName(),
				db_updated_data,
				true
			);
			
			this._setNewData(this.new_data);
			
			if (static::isAutoIncrement())
			{
				Collection pk = static::pk();
				string pk_name = pk.get(0);
				if (pk_name)
				{
					this.new_data.setValue(pk_name, last_id);
				}
			}
		}
		
		await this.afterSave(updated_data, is_update);
	}
	
	
	/**
	 * Delete model
	 */
	async Relation delete(Connection conn)
	{
		Collection filter = static::getPrimaryFilter(this.old_data, false);
		
		if (filter.count() > 0)
		{
			await conn.delete(
				static::getTableName(),
				filter
			);
		}
		
		return this;
	}
	
	
	/**
	 * Refresh model from database
	 */
	async Relation refresh(Connection conn)
	{
		Dict item = null;
		Collection filter = static::getPrimaryFilter(this.old_data, false);
		
		if (filter.count() > 0)
		{
			Query q = new Query
				|> .select( static::getTableName() )
				|> .filter(filter)
				|> .limit(1)
			;
			
			item = await conn.fetchOne(q);
			item = static::newInstanceFromDatabase(conn, item);
		}
		
		this._setNewData(item);
		
		return this;
	}
	
	
	/**
	 * Returns value
	 */
	var get(string name, var def_value = null) => this.new_data[name] |> default def_value;
	
	
	/**
	 * Set new value
	 */
	void set(string name, var value)
	{
		this.new_data.setValue(name, value);
	}
}