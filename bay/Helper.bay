/*!
 *  Bayrell Runtime Library
 *
 *  (c) Copyright 2016-2021 "Ildar Bikmamatov" <support@bayrell.org>
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

namespace Runtime.ORM;

use Runtime.lib;
use Runtime.BaseDriver;
use Runtime.Context;
use Runtime.Driver;
use Runtime.LambdaChain;
use Runtime.LambdaChainClass;
use Runtime.ORM.Annotations.Record;
use Runtime.ORM.Annotations.Table;
use Runtime.ORM.Annotations.TableList;
use Runtime.ORM.QueryBuilder;
use Runtime.ORM.StructBuilder;


@LambdaChainClass{}
@Driver{ "name": "Runtime.ORM.Helper" }
class Helper extends BaseDriver
{
	public Dict<StructBuilder> tables = {};
	
	
	
	/**
	 * Start driver
	 */
	public async void startDriver()
	{
		await this.buildStruct();
	}
	
	
	
	/**
	 * Build tables struct
	 */
	public async void buildStruct()
	{
		this.tables = await @.chainAsync(QueryBuilder::BUILD_TABLE_STRUCT_CHAIN, [ this.tables ]);
	}
	
	
	
	/**
	 * Build tables
	 */
	@LambdaChain{ "name": QueryBuilder::BUILD_TABLE_STRUCT_CHAIN }
	static async Dict<StructBuilder> buildTables(Dict<StructBuilder> tables)
	{
		Collection<Table> annotations = Context::getSubEntities(@.entities, classof TableList, classof Table);
		
		for (int i=0; i<annotations.count(); i++)
		{
			Table table = annotations[i];
			StructBuilder builder = null;
			
			if (tables.has(table.object_name))
			{
				builder = tables.get(table.object_name)
			}
			else
			{
				builder = new StructBuilder
				{
					"object_name": table.object_name,
					"table_name": table.table_name
				};
			}
			
			/* Extend struct */
			builder = await rtl::methodApplyAsync(table.class_name, table.class_method_name, [builder]);
			
			/* Add to tables */
			tables = tables.setIm(builder.object_name, builder);
		}
		
		return tables;
	}
}