/*!
 *  Bayrell Runtime Library
 *
 *  (c) Copyright 2016-2023 "Ildar Bikmamatov" <support@bayrell.org>
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

namespace Runtime.ORM;

use Runtime.BaseStruct;
use Runtime.Exceptions.RuntimeException;
use Runtime.ORM.Cursor;
use Runtime.ORM.Provider;
use Runtime.ORM.Query;
use Runtime.ORM.QueryResult;
use Runtime.ORM.Relation;


class Connection
{
	protected string name = "";
	
	
	/**
	 * Returns connection
	 */
	static Connection getConnection(string name = "default")
	{
		if (name == "") name = "default";
		
		Provider provider = @.provider(classof Provider);
		Connection conn = provider.getConnection(name);
		return conn;
	}
	
	
	/**
	 * Constructor
	 */
	public void constructor(string name)
	{
		this.name = name;
	}
	
	
	/**
	 * Connect
	 */
	async Connection connect()
	{
	}
	
	
	/**
	 * Check is connected
	 */
	bool isConnected() => false;
	
	
	/**
	 * Returns connection name
	 */
	bool getName() => this.name;
	
	
	/**
	 * Create new cursor
	 */
	Cursor createCursor() => new Cursor();
	
	
	/**
	 * Execute cursor
	 */
	async Cursor executeQuery(Query q, Dict params = null) => null;
	async Cursor execute(Query q, Dict params = null) => this.executeQuery(q, params);
	
	
	/**
	 * Insert query
	 */
	async var insert(
		string table_name,
		Dict insert_data,
		bool get_last_id = true,
		Dict params = null
	)
	{
		var last_id = null;
		
		if (table_name == "")
		{
			throw new RuntimeException("Table name is empty");
		}
		
		Query q = new Query()
			.insert(table_name)
			.values(insert_data)
		;
		
		Cursor c = await this.executeQuery(q, params);
		
		if (get_last_id)
		{
			last_id = await c.lastInsertId();
		}
		
		await c.close();
		
		return last_id;
	}
	
	
	/**
	 * Update query
	 */
	async void update(
		string table_name,
		Collection filter,
		Dict update_data,
		Dict params = null
	)
	{
		if (table_name == "")
		{
			throw new RuntimeException("Table name is empty");
		}
		
		Query q = new Query()
			.update(table_name)
			.values(update_data)
			.setFilter(filter)
		;
		
		Cursor c = await this.executeQuery(q, params);
		await c.close();
	}
	
	
	/**
	 * Delete item
	 */
	async void delete(
		string table_name,
		Collection filter,
		Dict params = null
	)
	{
		if (table_name == "")
		{
			throw new RuntimeException("Table name is empty");
		}
		
		Query q = new Query()
			|> .delete(table_name)
			|> .setFilter(filter)
		;
		
		Cursor c = await this.executeQuery(q, params);
		await c.close();
	}
	
	
	/**
	 * Begin transaction
	 */
	async void beginTransaction()
	{
	}
	
	
	/**
	 * Commit
	 */
	async void commit()
	{
	}
	
	
	/**
	 * rollBack
	 */
	async void rollBack()
	{
	}
	
	
	/**
	 * Convert item from database
	 */
	var fromDatabase(BaseStruct annotation, Dict item, string field_name) => item;
	
	
	/**
	 * Convert item to database
	 */
	var toDatabase(BaseStruct annotation, Dict item, string field_name) => item;
	
	
	/**
	 * Fetch all data by Query
	 */
	async QueryResult fetchAll(Query q, Dict params = null)
	{
		Cursor cursor = await this.executeQuery(q, params);
		QueryResult res = await cursor.fetchAll();
		await cursor.close();
		return res;
	}
	
	
	/**
	 * Fetch item by Query
	 */
	async Dict fetch(Query q, Dict params = null)
	{
		Cursor cursor = await this.executeQuery(q, params);
		Relation res = await cursor.fetch();
		await cursor.close();
		return res;
	}
	async Dict fetchOne(Query q, Dict params = null) => await this.fetch(q, params);
	
	
	/**
	 * Fetch relation
	 */
	async Dict fetchRelation(Query q, Dict params = null)
	{
		Cursor cursor = await this.executeQuery(q, params);
		Relation res = await cursor.fetchRelation();
		await cursor.close();
		return res;
	}
	
	
	/**
	 * Fetch variable
	 */
	async var fetchVar(Query q, string var_name, Dict params = null)
	{
		Cursor cursor = await this.executeQuery(q, params);
		Dict res = await cursor.fetchVar(var_name);
		await cursor.close();
		return res;
	}
	
	
	/**
	 * Returns sql string
	 */
	async string getSQL(Query q)
	{
		return "";
	}
	
	
	/**
	 * Returns sql string
	 */
	async list buildQuery(Query q)
	{
		return [null, null];
	}
}