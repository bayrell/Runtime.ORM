/*!
 *  BayLang Technology
 *
 *  (c) Copyright 2016-2024 "Ildar Bikmamatov" <support@bayrell.org>
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

namespace Runtime.ORM;

use Runtime.lib;
use Runtime.BaseObject;
use Runtime.BaseStruct;
use Runtime.MapInterface;
use Runtime.Exceptions.ItemNotFound;
use Runtime.Exceptions.RuntimeException;
use Runtime.ORM.Connection;
use Runtime.ORM.Cursor;
use Runtime.ORM.DatabaseSchema;
use Runtime.ORM.Provider;
use Runtime.ORM.Query;
use Runtime.ORM.QueryFilter;
use Runtime.ORM.QueryResult;
use Runtime.ORM.Annotations.AutoIncrement;
use Runtime.ORM.Annotations.BaseType;
use Runtime.ORM.Annotations.ForeignKey;
use Runtime.ORM.Annotations.Primary;


class Relation extends BaseObject implements MapInterface
{
	protected Map old_data = null;
	protected Map new_data = new Map;
	
	
	/**
	 * Constructor
	 */
	void constructor()
	{
		parent();
	}
	
	
	/**
	 * Returns table name
	 */
	pure string getTableName() => "";
	
	
	/**
     * Returns table schema
     */
    pure memorize Collection<BaseStruct> schema() => "";
	
	
	/**
	 * Create Instance of class
	 */
	pure Relation newInstance(string class_name, Dict data = null)
	{
		if (class_name == "")
		{
			throw new RuntimeException("Class name does not exists");
		}
		Relation instance = rtl::newInstance(class_name);
		instance._initData(data);
		return instance;
	}
	
	
	/**
	 * Convert to model
	 */
	BaseStruct toModel() => static::newInstance(static::getClassName(), this.toMap());
	
	
	/**
	 * Convert to Dict
	 */
	Map all() => this.new_data.clone();
	Map old() => this.old_data.clone();
	Map toMap() => this.new_data.clone();
	Map intersect(Collection fields = null) => this.new_data.intersect(fields);
	
	
	/**
	 * Returns table annotations
	 */
	pure Collection<BaseStruct> getAnotations()
	{
		Provider provider = @.provider(classof Provider);
		return provider.getAnotations(static::getTableName());
	}
	
	
	/**
	 * To database
	 */
	async static Dict toDatabase(Connection conn, Dict data, bool is_update)
	{
		Provider provider = @.provider(classof Provider);
		return await provider.toDatabase(static::getTableName(), conn, data, is_update);
	}
	
	
	/**
	 * From database
	 */
	static Dict fromDatabase(Connection conn, Dict data)
	{
		Provider provider = @.provider(classof Provider);
		return await provider.fromDatabase(static::getTableName(), conn, data);
	}
	
	
	/**
	 * Returns true if primary key is auto increment
	 */
	pure AutoIncrement getAutoIncrement()
	{
		Provider provider = @.provider(classof Provider);
		return provider.getAutoIncrement(static::getTableName());
	}
	
	
	/**
	 * Returns primary key names of table
	 */
	pure Collection<string> getPrimaryKeyNames()
	{
		Provider provider = @.provider(classof Provider);
		return provider.getPrimaryKeyNames(static::getTableName());
	}
	
	
	/**
	 * Returns primary data
	 */
	pure Dict getPrimaryFromData(Dict data)
	{
		Provider provider = @.provider(classof Provider);
		return provider.getPrimaryFromData(static::getTableName(), data);
	}
	
	
	/**
	 * Returns primary filter by data
	 */
	pure Vector<QueryFilter> getPrimaryFilter(Dict data, bool use_full_key = true)
	{
		Provider provider = @.provider(classof Provider);
		return provider.getPrimaryFilter(static::getTableName(), data, use_full_key);
	}
	
	
	/**
	 * Returns primary key
	 */
	public Map getPrimaryKey()
	{
		Provider provider = @.provider(classof Provider);
		return provider.getPrimaryFromData(static::getTableName(), this.new_data);
	}
	
	
	/**
	 * Returns value
	 */
	var get(string name, var def_value = null) => this.new_data.get(name, def_value);
	
	
	/**
	 * Set new value
	 */
	void set(string name, var value)
	{
		this.new_data.set(name, value);
	}
	
	
	/**
	 * Get updated data
	 */
	Map getUpdatedData()
	{
		if (this.new_data == null) return {};
		
		Map res = new Map;
		
		Collection new_data_keys = this.new_data.keys();
		for (int i=0; i<new_data_keys.count(); i++)
		{
			string field_name = new_data_keys[i];
			var new_value = this.new_data[field_name];
			
			if (this.old_data == null)
			{
				res.set(field_name, new_value);
			}
			else
			{
				if (not this.old_data.has(field_name))
				{
					res.set(field_name, new_value);
				}
				else
				{
					var old_value = this.old_data[field_name];
					if (new_value != old_value)
					{
						res.set(field_name, new_value);
					}
				}
			}
		}
		
		return res;
	}
	
	
	/**
	 * Init data
	 */
	protected void _initData(Dict data = null)
	{
		this.old_data = data != null ? new Map(data) : null;
		this.new_data = data != null ? new Map(data) : new Map();
	}
	
	
	/**
	 * Set data
	 */
	async void setData(Dict item)
	{
		item.each(
			void (var value, string key)
			{
				this.set(key, value);
			}
		);
	}
	
	
	/**
	 * Returns true if object is new
	 */
	bool isNew()
	{
		return this.old_data ? false : true;
	}
	
	
	/**
	 * Returns true if data has loaded from database
	 */
	bool isUpdate()
	{
		return this.old_data ? true : false;
	}
	
	
	/**
	 * Returns true if model is changed
	 */
	bool isChanged()
	{
		Dict d1 = this.old_data;
		Dict d2 = this.new_data;
		
		if (d1 == null) return true;
		if (d2 == null) return true;
		
		Collection d1_keys = d1.keys();
		Collection d2_keys = d2.keys();
		
		for (int i=0; i<d1_keys.count(); i++)
		{
			string key1 = d1_keys.get(i);
			
			if (not d2.has(key1))
			{
				return true;
			}
			
			var value1 = d1.get(key1);
			var value2 = d2.get(key1);
			
			if (value1 != value2)
			{
				return true;
			}
		}
		
		for (int i=0; i<d2_keys.count(); i++)
		{
			string key2 = d2_keys.get(i);
			
			if (not d1.has(key2))
			{
				return true;
			}
		}
		
		return false;
	}
	
	
	/**
	 * Save model
	 */
	async void save(Connection conn, Dict params = null)
	{
		string table_name = static::getTableName();
		Provider provider = @.provider(classof Provider);
		
		/* Call before save */
		await @.callHookAsync(DatabaseSchema::SAVE_BEFORE, {
			"item": this,
		});
		
		bool is_update = this.isUpdate();
		Dict updated_data = this.getUpdatedData();
		
		if (is_update)
		{
			Collection updated_data_keys = updated_data.keys();
			if (updated_data_keys.count() > 0)
			{
				Collection filter = provider.getPrimaryFilter(table_name, this.old_data, false);
				if (filter.count() > 0)
				{
					Dict db_updated_data = await provider.toDatabase
						(table_name, conn, updated_data, is_update);
					
					await conn.update(
						table_name,
						filter,
						db_updated_data,
						params
					);
				}
				else
				{
					throw new RuntimeException("Primary key does not exists in " ~ table_name);
				}
				
				for (int i=0; i<updated_data_keys.count(); i++)
				{
					string field_name = updated_data_keys[i];
					this.old_data.set(field_name, updated_data[field_name]);
				}
			}
		}
		else
		{
			Dict db_updated_data = provider.toDatabase
				(table_name, conn, updated_data, is_update);
			
			var last_id = await conn.insert(
				table_name,
				db_updated_data,
				true,
				params
			);
			
			this._initData(this.new_data);
			
			AutoIncrement auto_increment = provider.getAutoIncrement(table_name);
			if (auto_increment and auto_increment.name)
			{
				this.old_data.set(auto_increment.name, last_id);
				this.new_data.set(auto_increment.name, last_id);
			}
		}
		
		/* Call before after */
		await @.callHookAsync(DatabaseSchema::SAVE_AFTER, {
			"item": this,
		});
	}
	
	
	/**
	 * Delete model
	 */
	async Relation delete(Connection conn, Dict params = null)
	{
		if (this.isNew())
		{
			return;
		}
		
		/* Get provider */
		string table_name = static::getTableName();
		Provider provider = @.provider(classof Provider);
		
		/* Get primary filter */
		Collection filter = provider.getPrimaryFilter(table_name, this.old_data, false);
		
		/* Delete record */
		if (filter.count() > 0)
		{
			await conn.delete(
				table_name,
				filter,
				params
			);
		}
		else
		{
			throw new RuntimeException("Primary key does not exists in " ~ table_name);
		}
		
		return this;
	}
	
	
	/**
	 * Refresh model from database
	 */
	async Relation refresh(Connection conn, Dict params = null)
	{
		string table_name = static::getTableName();
		Provider provider = @.provider(classof Provider);
		
		Dict item = null;
		Collection<QueryFilter> filter = provider.getPrimaryFilter(
			table_name, this.old_data, false
		);
		
		if (filter.count() > 0)
		{
			Query q = new Query()
				.select([table_name ~ ".*"])
				.from(table_name)
				.setFilter(filter)
				.limit(1)
			;
			
			item = await conn.fetchOne(q, params);
		}
		
		if (item)
		{
			this._initData(item.toDict());
		}
		
		return this;
	}
	
	
	/**
	 * Returns query
	 */
	static Query query() => new Query().relation(static::getClassName());
	
	
	/**
	 * Find relations by filter
	 */
	static async Vector<Relation> findItems
		(Connection conn, Collection<QueryFilter> filter, Dict params = null)
	{
		string table_name = static::getTableName();
		
		Query q = static::query()
			.select([table_name ~ ".*"])
			.setFilter(filter)
		;
		
		return await conn.findRelations(q, params);
	}
	
	
	/**
	 * Find relation by filter
	 */
	static async Relation findByFilter
		(Connection conn, Collection<QueryFilter> filter, Dict params = null)
	{
		string table_name = static::getTableName();
		
		Query q = static::query()
			.select([table_name ~ ".*"])
			.setFilter(filter)
			.limit(1)
		;
		
		return await conn.findRelation(q, params);
	}
	
	
	/**
	 * Find relation by primary key
	 */
	static async Relation findByPk(Connection conn, Dict pk, Dict params = null)
	{
		/* Returns primary filter */
		Vector filter = static::getPrimaryFilter(pk, false);
		
		/* Find relation */
		return await static::findByFilter(conn, filter, params);
	}
	
	
	/**
	 * Find relation by object
	 */
	static async Relation findById(Connection conn, var id, Dict params = null)
	{
		/* Get primary keys */
		Vector pk = static::getPrimaryKeyNames();
		string pk_name = pk.get(0);
		
		/* Build filter */
		Vector filter = [
			new QueryFilter(pk_name, "=", id)
		];
		
		/* Find relation */
		return await static::findByFilter(conn, filter, params);
	}
	
	
	/**
	 * Find or create
	 */
	static async Relation findOrCreate
		(Connection conn, Dict filter, Dict update, Dict params = null)
	{
		string class_name = static::getClassName();
		
		/* Build filter */
		Vector search = filter.transition(
			QueryFilter (var value, string key)
			{
				return new QueryFilter(key, "=", value);
			}
		);
		
		/* Find item */
		Relation relation = await static::findByFilter(conn, search, params);
		if (relation) return relation;
		
		/* Create if not found */
		relation = Relation::newInstance(class_name);
		
		/* Set new data */
		relation.setData(filter);
		relation.setData(update);
		
		return relation;
	}
}