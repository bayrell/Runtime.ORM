/*!
 *  Bayrell Runtime Library
 *
 *  (c) Copyright 2016-2020 "Ildar Bikmamatov" <support@bayrell.org>
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

namespace Runtime.ORM;

use Runtime.lib;
use Runtime.BaseStruct;
use Runtime.IntrospectionClass;
use Runtime.IntrospectionInfo;
use Runtime.RuntimeUtils;
use Runtime.ORM.ConnectionInterface as Connection;
use Runtime.ORM.CursorInterface as Cursor;
use Runtime.ORM.DriverInterface as ORMDriver;
use Runtime.ORM.Foreign;
use Runtime.ORM.ForeignField;
use Runtime.ORM.QueryBuilder;
use Runtime.ORM.Record;
use Runtime.ORM.Annotations.AutoIncrement;
use Runtime.ORM.Annotations.CoreType;
use Runtime.ORM.Annotations.ForeignKey;
use Runtime.ORM.Annotations.Primary;


struct Foreign extends BaseStruct
{
	string class_name = "";
	Primary primary_key = null;
	IntrospectionClass class_info = null;
	Dict<Record> fields = {};
	
	
	
	/**
	 * Set class name
	 */
	pure Foreign init(string class_name)
	{
		Foreign foreign = new Foreign();
		foreign <= class_name <= class_name;
		foreign <= class_info <= RuntimeUtils::getClassIntrospectionWithParents(class_name);
		return foreign;
	}
	
	
	
	/**
	 * Returns class keys
	 */
	pure memorize Collection<BaseStruct> keys(Foreign foreign) => foreign.class_name |> lib::applyMethod("keys");
	
	
	
	/**
	 * Returns foreign keys
	 */
	pure memorize Collection<ForeignKey> foreignKeys(Foreign foreign) =>
		static::keys(foreign)
		|> lib::filter( lib::isInstance( classof ForeignKey ) )
	;
	
	
	
	/**
	 * Load full dictionary
	 */
	static async Foreign loadOptions
	(
		Foreign foreign, string class_name, string option_name, Dict db_settings = null
	)
	{
		/* Get all options */
		Collection options =
			class_name
			|> lib::method("select")
			|> lib::apply()
			|> await .all(db_settings)
		;
		
		foreign <= fields <= { option_name } <= options <= options;
		
		return options;
	}
	
	
	
}