/*!
 *  Bayrell Runtime Library
 *
 *  (c) Copyright 2016-2020 "Ildar Bikmamatov" <support@bayrell.org>
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

namespace Runtime.ORM;

use Runtime.CoreStruct;


struct QueryBuilder extends CoreStruct
{
	static const string QUERY_SELECT = "select";
	static const string QUERY_INSERT = "insert";
	static const string QUERY_UPDATE = "update";
	static const string QUERY_DELETE = "delete";
	static const string QUERY_INSERT_OR_UPDATE = "insert_or_update";
	
	string _kind = "";
	string _table_name = "";
	string _table_name_alias = "";
	Collection<string> _fields = null;
	Collection<string> _join = null;
	Collection<Collection<string>> _order = null;
	Dict<string> _where = null;
	int _start = -1;
	int _limit = -1;
	
	
	
	/**
	 * Select query
	 */
	pure QueryBuilder select(string table_name, string prefix = "") =>
		QueryBuilder (QueryBuilder q) use (table_name, prefix) => q.copy
		{
			"_kind": static::QUERY_SELECT,
			"_fields": ["*"],
			"_table_name": prefix ~ table_name,
		}
	;
	
	
	
	/**
	 * Add offset
	 */
	pure QueryBuilder offset(int page, int limit) =>
		QueryBuilder (QueryBuilder q) use (page, limit) => q.copy
		{
			"_start": page * limit,
			"_limit": limit,
		}
	;
	
	
	
	/**
	 * Set order
	 */
	pure QueryBuilder order(Collection<Collection<string>> order) =>
		QueryBuilder (QueryBuilder q) use (order) => q.copy
		{
			"_order": order,
		}
	;
	
	
	
	/**
	 * Add order
	 */
	pure QueryBuilder addOrder(string field_name, string order) =>
		QueryBuilder (QueryBuilder q) use (field_name, order) => q.copy
		{
			"_order": q._order != null ? q._order.pushIm([field_name, order]) : [ [field_name, order] ]
		}
	;
	
	
	
	/**
	 * Add where
	 */
	pure QueryBuilder where(Dict where) =>
		QueryBuilder (QueryBuilder q) use (where) => q.copy
		{
			"_where": where,
		}
	;
	
	
}