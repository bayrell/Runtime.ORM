/*!
 *  Bayrell Runtime Library
 *
 *  (c) Copyright 2016-2020 "Ildar Bikmamatov" <support@bayrell.org>
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

namespace Runtime.ORM;

use Runtime.BaseStruct;
use Runtime.ORM.ConnectionInterface as Connection;
use Runtime.ORM.CursorInterface as Cursor;
use Runtime.ORM.DriverInterface as ORMDriver;


struct QueryBuilder extends BaseStruct
{
	static const string QUERY_SELECT = "select";
	static const string QUERY_INSERT = "insert";
	static const string QUERY_UPDATE = "update";
	static const string QUERY_DELETE = "delete";
	static const string QUERY_INSERT_OR_UPDATE = "insert_or_update";
	
	string _orm_class_name = "";
	string _kind = "";
	string _table_name = "";
	string _table_name_alias = "";
	Collection<string> _fields = null;
	Collection<Dict> _join = null;
	Collection<Collection<string>> _order = null;
	Collection<list> _filter = null;
	int _start = -1;
	int _limit = -1;
	bool _as_record = true;
	bool _found_rows = false;
	
	
	/**
	 * Select query
	 */
	QueryBuilder orm(string class_name) =>
		this.copy
		{
			"_orm_class_name": class_name,
		}
	;
	
	
	/**
	 * As record
	 */
	QueryBuilder asRecord(bool value) =>
		this.copy
		{
			"_as_record": value,
		}
	;
	
	
	
	/**
	 * Select query
	 */
	QueryBuilder select(string table_name, string alias_name = "") =>
		this.copy
		{
			"_kind": static::QUERY_SELECT,
			"_fields": ["*"],
			"_table_name": table_name,
			"_table_name_alias": alias_name,
		}
	;
	
	
	
	/**
	 * Set fields
	 */
	QueryBuilder fields(Collection fields) =>
		this.copy
		{
			"_fields": fields,
		}
	;
	
	
	
	/**
	 * Add page
	 */
	QueryBuilder page(int page, int limit) =>
		this.copy
		{
			"_start": page * limit,
			"_limit": limit,
		}
	;
	
	
	
	/**
	 * Set offset
	 */
	QueryBuilder offset(int start, int limit) =>
		this.copy
		{
			"_start": start,
			"_limit": limit,
		}
	;
	
	
	
	/**
	 * Set start
	 */
	QueryBuilder start(int start) =>
		this.copy
		{
			"_start": start,
		}
	;
	
	
	
	/**
	 * Set limit
	 */
	QueryBuilder limit(int limit) =>
		this.copy
		{
			"_limit": limit,
		}
	;
	
	
	
	/**
	 * Set order
	 */
	QueryBuilder order(Collection<Collection<string>> order) =>
		this.copy
		{
			"_order": order,
		}
	;
	
	
	
	/**
	 * Add order
	 */
	QueryBuilder addOrder(string field_name, string order) =>
		this.copy
		{
			"_order": this._order != null ? this._order.pushIm([field_name, order]) : [ [field_name, order] ]
		}
	;
	
	
	
	/**
	 * Add filter
	 */
	QueryBuilder filter(Collection<list> filter) =>
		this.copy
		{
			"_filter": filter,
		}
	;
	
	
	
	/**
	 * Add filter
	 */
	QueryBuilder prependFilter(list filter) =>
		this.copy
		{
			"_filter": this._filter != null ? this._filter.prependIm(filter) : [ filter ]
		}
	;
	
	
	
	/**
	 * Add filter
	 */
	QueryBuilder appendFilter(list filter) =>
		this.copy
		{
			"_filter": this._filter != null ? this._filter.appendIm(filter) : [ filter ]
		}
	;
	
	
	
	/**
	 * Add filter
	 */
	QueryBuilder addFilter(list filter) => this.appendFilter(filter);
	
	
	
	/**
	 * Inner join
	 */
	QueryBuilder innerJoin(string table_name, string alias_name, string where)
	{
		Dict join =
		{
			"kind": "inner",
			"table_name": table_name,
			"alias_name": alias_name,
			"where": where,
		};
		return this.copy
		{
			"_join": this._join != null ? this._join.pushIm(join) : [ join ]
		}
	}
	
	
	
	/**
	 * Left join
	 */
	QueryBuilder leftJoin(string table_name, string alias_name, string where)
	{
		Dict join =
		{
			"kind": "left",
			"table_name": table_name,
			"alias_name": alias_name,
			"where": where,
		};
		return this.copy
		{
			"_join": this._join != null ? this._join.pushIm(join) : [ join ]
		}
	}
	
	
	
	/**
	 * From database
	 */
	Dict fromDatabase(Connection conn, Dict item)
	{
		/* From database */
		if (this._orm_class_name != "")
		{
			fn fromDatabase = rtl::method(this._orm_class_name, "fromDatabase");
			item = await fromDatabase(conn, item);
		}
		
		/* Convert to record */
		if (this._orm_class_name != "" and this._as_record)
		{
			fn newInstance = rtl::method(this._orm_class_name, "newInstance");
			Dict prev_item = item;
			item = newInstance(item);
			item <= _old_item <= prev_item;
		}
		
		return item;
	}
	
	
	
	/**
	 * Get connection
	 */
	async Connection connect(Dict db_settings = null)
	{
		string driver_name = db_settings["driver"] |> default string classof ORMDriver;
		ORMDriver orm = @.getDriver(driver_name);
		Connection conn = await orm.connect(db_settings);
		return conn;
	}
	
	
	
	/**
	 * Execute query
	 */
	async Cursor execute(Dict db_settings = null)
	{
		Connection conn = await this.connect(db_settings);
		Cursor cursor = await conn.execute(this, db_settings);
		return cursor;
	}
	
	
	
	/**
	 * Fetch one
	 */
	async Dict one(Dict db_settings = null)
	{
		Cursor cursor = await this.execute(db_settings);
		Dict item = await cursor.fetchOne();
		await cursor.close();
		
		if (item != null) item = this.fromDatabase(cursor.getConnection(), item);
		
		return item;
	}
	
	
	
	/**
	 * Fetch all
	 */
	async Dict all(Dict db_settings = null)
	{
		Cursor cursor = await this.execute(db_settings);
		Collection<Dict> items = await cursor.fetchAll();
		await cursor.close();
		
		items = items.map
		(
			Dict (Dict item) use (cursor) => this.fromDatabase(cursor.getConnection(), item)
		);
		
		return items;
	}
	
}