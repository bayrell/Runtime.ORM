/*!
 *  Bayrell Runtime Library
 *
 *  (c) Copyright 2016-2023 "Ildar Bikmamatov" <support@bayrell.org>
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

namespace Runtime.ORM;

use Runtime.lib;
use Runtime.BaseProvider;
use Runtime.Exceptions.RuntimeException;
use Runtime.ORM.Connection;
use Runtime.ORM.Annotations.AutoIncrement;
use Runtime.ORM.Annotations.BaseType;
use Runtime.ORM.Annotations.Database;
use Runtime.ORM.Annotations.Primary;
use Runtime.ORM.Annotations.Table;


class Provider extends BaseProvider
{
	Map connection_list = new Map;
	Map tables = new Map;
	
	
	/**
	 * Returns connection
	 */
	Connection getConnection(string name)
	{
		if (not this.connection_list.has(name))
		{
			throw new RuntimeException("Connection " ~ name ~ " not found");
		}
		return this.connection_list[name];
	}
	
	
	/**
	 * Add new connection
	 */
	void addConnection(Connection conn)
	{
		this.connection_list.setValue(conn.getName(), conn);
	}
	
	
	/**
	 * Start provider
	 */
	async void start()
	{
		await parent::start();
		
		Collection<Database> items = @.entities.filter( lib::isInstance(classof Database) );
		for (int i=0; i<items.count(); i++)
		{
			Database db = items[i];
			string class_name = db.name;
			fn getMethodsList = rtl::method(class_name, "getMethodsList");
			fn getMethodInfoByName = rtl::method(class_name, "getMethodInfoByName");
			
			Collection<string> methods = getMethodsList();
			for (int j=0; j<methods.count(); j++)
			{
				string method_name = methods[j];
				Dict info = getMethodInfoByName(method_name);
				Collection annotations = info["annotations"];
				if (annotations)
				{
					Table table = annotations.findItem( lib::isInstance(classof Table) );
					string table_name = table.name;
					Collection annotations = rtl::callMethod(class_name, method_name);
					this.tables.setValue(table_name, {
						"annotations": annotations,
						"table": table,
					});
				}
			}
		}
		
	}
	
}