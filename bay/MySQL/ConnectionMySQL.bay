/*!
 *  Bayrell Runtime Library
 *
 *  (c) Copyright 2016-2023 "Ildar Bikmamatov" <support@bayrell.org>
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

namespace Runtime.ORM.MySQL;

use Runtime.io;
use Runtime.re;
use Runtime.ORM.Connection;
use Runtime.ORM.Cursor;
use Runtime.ORM.Query;
use Runtime.ORM.QueryField;
use Runtime.ORM.QueryFilter;
use Runtime.ORM.MySQL.CursorMySQL;


class ConnectionMySQL extends Connection
{
	public string host = "";
	public string port = "";
	public string login = "";
	public string password = "";
	public string database = "";
	public string prefix = "";
	public string connect_error = "";	
	public var pdo = null;
	public bool is_transaction = false;
	
	
	/**
	 * Connect
	 */
	async ConnectionMySQL connect()
	{
		this.connect_error = "";
		
		#ifcode PHP then
		
		try
		{
			$str = 'mysql:host='.$this->host;
			if ($this->port != null) $str .= ':'.$this->port;
			if ($this->database != null) $str .= ';dbname='.$this->database;
			$this->pdo = new \PDO(
				$str, $this->login, $this->password, 
				array(
					\PDO::ATTR_PERSISTENT => false
				)
			);
			$this->pdo->setAttribute(\PDO::ATTR_ERRMODE, \PDO::ERRMODE_EXCEPTION);
			$this->pdo->exec("set names utf8");
		}
		catch (\PDOException $e)
		{
			$this->connect_error = 'Failed connected to database!';
		}
		catch (\Excepion $e)
		{
			$this->connect_error = $e->getMessage();
		}
		
		#endif
		
		return this;
	}
	
	
	/**
	 * Connect
	 */
	bool isConnected()
	{
		return this.pdo != null;
	}
	
	
	/**
	 * Create new cursor
	 */
	CursorMySQL createCursor() => new CursorMySQL(this);
	
	
	/**
	 * Execute Query
	 */
	async Cursor execute(Query q, Dict params = null)
	{
		if (params == null) params = {};
		
		/* Check is debug */
		bool is_debug = params["debug"] |> default bool false;
		if (q._debug)
		{
			is_debug = true;
		}
		
		/* Build query */
		SQLBuilder builder = new SQLBuilder(q);
		
		/* Check builder correct */
		if (not builder.isValid())
		{
			return null;
		}
		
		/* Create cursor */
		Cursor cursor = this.createCursor();
		
		/* Get sql */
		string sql = builder.getSQL();
		Dict data = builder.getData();
		
		/* Debug sql */
		if (is_debug)
		{
			string sql = builder.formatSQL();
			io::print(sql);
		}
		
		/* Execute sql */
		Cursor cursor = await cursor.executeSQL(sql, data, params);
		cursor.q = q.copy();
		
		return cursor;
	}
	
	
	/**
	 * Prepare field
	 */
	string prepare_field(var item) => item;
	
	
	/**
	 * Prepare value
	 */
	string prepare_value(string item, string op)
	{
		if (op == "%like%")
		{
			item = "%" ~ item ~ "%";
			op = "like";
		}
		else if (op == "like%")
		{
			item = item ~ "%";
			op = "like";
		}
		else if (op == "%like")
		{
			item = "%" ~ item;
			op = "like";
		}
		return [item, op];
	}
	
	
	/**
	 * Quote
	 */
	string quote(string value)
	{
		#ifcode PHP then
		$value = $this->pdo->quote($value);
		#endif
		return value;
	}
}