/*!
 *  BayLang Technology
 *
 *  (c) Copyright 2016-2024 "Ildar Bikmamatov" <support@bayrell.org>
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

namespace Runtime.ORM;

use Runtime.BaseObject;
use Runtime.ORM.Connection;
use Runtime.ORM.Query;


class BaseMigration extends BaseObject
{
	Connection connection = null;
	
	
	/**
	 * Create migration
	 */
	void constructor(Connection connection)
	{
		parent();
		this.connection = connection;
	}
	
	
	/**
	 * Returns branch
	 */
	string getBranch() => "";
	
	
	/**
	 * Returns name
	 */
	string getName() => "";
	
	
	/**
	 * Returns required migrations
	 */
	Collection<string> getRequired() => [];
	
	
	/**
	 * Comment
	 */
	async void comment(string text)
	{
		await this.executeSQL("-- " ~ text);
	}
	
	
	/**
	 * Execute raw SQL
	 */
	async void executeSQL(string sql, Dict data = null)
	{
		if (sql instanceof Collection)
		{
			sql = rs::join("\n", sql);
		}
		Query q = new Query();
		q.raw(sql, data);
		await this.connection.execute(q);
	}
	
	
	/**
	 * Migration up
	 */
	async void up()
	{
	}
	
	
	/**
	 * Migration down
	 */
	async void down()
	{
	}
}