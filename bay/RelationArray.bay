/*!
 *  Bayrell Runtime Library
 *
 *  (c) Copyright 2016-2023 "Ildar Bikmamatov" <support@bayrell.org>
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

namespace Runtime.ORM;

use Runtime.BaseStruct;
use Runtime.ORM.Connection;
use Runtime.ORM.Query;
use Runtime.ORM.Relation;
use Runtime.ORM.Annotations.ForeignKey;


class RelationArray extends Vector<Relation>
{
	protected string table_name = "";
	
	
	/**
	 * Create new RelationArray
	 */
	void constructor(string table_name = "")
	{
		parent();
		this.table_name = table_name;
	}
	
	
	/**
	 * Returns table name
	 */
	string getTableName() => this.table_name;
	
	
	/**
	 * Transform items
	 */
	Collection<BaseStruct> toModel(string class_name)
	{
		return this.map(
			Dict (Relation item) use (class_name) => item.toModel( class_name )
		).toCollection();
	}
	
	
	/**
	 * Build query for resolve foreign key
	 */
	async Query resolveQuery(Connection conn, string key_name = "")
	{
		ForeignKey foreign_key = Relation::getForeignKey(key_name);
		Query q = await foreign_key.resolveQuery(conn, this);
		return q;
	}
	
	
	/**
	 * Resolve foreign key
	 */
	async RelationArray resolve(Connection conn, string key_name)
	{
		ForeignKey foreign_key = Relation::getForeignKey(key_name);
		RelationArray items = await foreign_key.resolve(conn, this);
		return items;
	}
	
	
	/**
	 * Build query for reverse resolve foreign key
	 */
	async Query resolveReverseQuery(Connection conn, string key_name)
	{
		ForeignKey foreign_key = Relation::getForeignKey(key_name);
		RelationArray items = await foreign_key.resolveReverseQuery(conn, this);
		return items;
	}
	
	
	/**
	 * Reverse resolve foreign key
	 */
	async RelationArray resolveReverse(Connection conn, string key_name)
	{
		ForeignKey foreign_key = Relation::getForeignKey(key_name);
		RelationArray items = await foreign_key.resolveReverse(conn, this);
		return items;
	}
	
	
	/**
	 * Resolve all
	 */
	async RelationArray resolveAll(Connection conn, string key_name)
	{
		ForeignKey foreign_key = Relation::getForeignKey(key_name);
		RelationArray items = await foreign_key.resolveAll(conn, this);
		return items;
	}
	
}