/*!
 *  Bayrell Runtime Library
 *
 *  (c) Copyright 2016-2021 "Ildar Bikmamatov" <support@bayrell.org>
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

namespace Runtime.ORM;

use Runtime.BaseObject;
use Runtime.BaseStruct;


struct StructBuilder extends BaseStruct
{
	static const string SET_NULL = "SET_NULL";
	static const string SET_DEFAULT = "SET_DEFAULT";
	static const string CASCADE = "CASCADE";
	static const string RESTRICT = "RESTRICT";
	static const string NO_ACTION = "NO_ACTION";
	
	string class_name = "";
	string object_name = "";
	string table_name = "";
	Dict<Dict> fields = new Dict();
	Collection<BaseStruct> keys = new Collection();
	Collection<fn> from_database = new Collection();
	Collection<fn> to_database = new Collection();
	
	
	
	/**
	 * Table name
	 */
	StructBuilder tableName(string table_name) =>
		this.copy
		{
			"table_name": table_name,
		}
	;	
	
	
	
	/**
	 * Add field
	 */
	StructBuilder addField(Dict item) =>
		item["api_name"] != null ?
			this.copy
			{
				"fields": this.fields.setIm(item["api_name"], item)
			}
			: this
	;
	
	
	
	/**
	 * Add key
	 */
	StructBuilder addKey(BaseStruct annotation) =>
		this.copy
		{
			"keys": this.keys.pushIm(annotation)
		}
	;
	
	
	
	/**
	 * From database
	 */
	StructBuilder fromDatabase(fn f) =>
		this.copy
		{
			"from_database": this.from_database.pushIm(f)
		}
	;
	
	
	
	/**
	 * To database
	 */
	StructBuilder toDatabase(fn f) =>
		this.copy
		{
			"to_database": this.to_database.pushIm(f)
		}
	;
	
}