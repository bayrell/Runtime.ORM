/*!
 *  Bayrell Runtime Library
 *
 *  (c) Copyright 2016-2023 "Ildar Bikmamatov" <support@bayrell.org>
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

namespace Runtime.ORM.MySQL;

use Runtime.io;
use Runtime.ORM.Query;


class ConnectionMySQL extends Connection
{
	public string host = "";
	public string port = "";
	public string login = "";
	public string password = "";
	public string database = "";
	public string prefix = "";
	public string connect_error = "";	
	public var pdo = null;
	public bool is_transaction = false;
    
	
	/**
	 * Connect
	 */
	ConnectionMySQL connect()
	{
		this.connect_error = "";
        
		#ifcode PHP then
        
        try
		{
			$str = 'mysql:host='.$this->host;
			if ($this->port != null) $str .= ':'.$this->port;
			if ($this->database != null) $str .= ';dbname='.$this->database;
			$this->pdo = new \PDO(
				$str, $this->login, $this->password, 
				array(
					\PDO::ATTR_PERSISTENT => false
				)
			);
			$this->pdo->setAttribute(\PDO::ATTR_ERRMODE, \PDO::ERRMODE_EXCEPTION);
			$this->pdo->exec("set names utf8");
		}
		catch (\PDOException $e)
		{
			$this->connect_error = 'Failed connected to database!';
		}
		catch (\Excepion $e)
		{
			$this->connect_error = $e->getMessage();
		}
        
        #endif
        
		return this;
	}
	
	
	/**
	 * Connect
	 */
	bool isConnected()
	{
		return this.pdo != null;
	}
	
	
	/**
	 * Create new cursor
	 */
	CursorMySQL createCursor() => new CursorMySQL(this);
	
	
	/**
	 * Begin transaction
	 */
	async void beginTransaction()
	{
		#ifcode PHP then
		
		$this->pdo->beginTransaction();
		$this->is_transaction = true;
		
		#endif
	}
	
	
	/**
	 * Commit
	 */
	async void commit()
	{
		#ifcode PHP then
		
		if ($this->is_transaction)
		{
			$this->pdo->commit();
			$this->is_transaction = false;
		}
		
		#endif
	}
	
	
	/**
	 * rollBack
	 */
	async void rollBack()
	{
		#ifcode PHP then
		
		if ($this->is_transaction)
		{
			$this->pdo->rollBack();
			$this->is_transaction = false;
		}
		
		#endif
	}
	
	
	/**
	 * Execute sql query
	 */
	async Cursor executeSQL(string sql, Dict data = null, Dict params = null)
	{
		Cursor cursor = this.createCursor();
		
		bool is_debug = params["debug"] |> default bool false;
		if (is_debug)
		{
			string sql2 = static::getSQL(sql, data);
			io::print(sql);
		}
		
		await cursor.executeSQL(sql, data);
		
		return cursor;
	}
	
	
	/**
	 * Execute cursor
	 */
	async Cursor executeQuery(Query q, Dict params = null)
	{
		if (params == null) params = {};				
		if (q.is_debug) params <= debug <= true;
		
		list res = await this.buildQuery(q);
		
		if (res)
		{
			string sql = res[0];
			Dict data = res[1];
			
			return await this.executeSQL(sql, data, params);
		}
		
		return null;
	}
	

	/**
	 * Returns query sql
	 */
	async list buildQuery(Query q)
	{
		/* Select query */
		if (q._kind == Query::QUERY_SELECT)
		{
			string sql = "SELECT ";
			Dict data = {};
			
			/* Add fields */
			if (q.fields != null) sql ~= rs::join(", ", q._fields);
			else sql ~= " * ";
			
			/* New line */
			sql ~= "\n";
			
			/* Add table name */
			sql ~= " FROM " ~ this.prefix ~ q._table_name;
			
			/* Add table alias */
			if (q._table_name_alias != "") $sql ~= " AS " . q._table_name_alias;
			
			/* New line */
			sql ~= "\n";
			
			/* Add joins */
			if (q._join != null and q._join.count() > 0)
			{
				for (int i=0; i<q._join.count(); i++)
				{
					Dict join = q._join[i];
					
					string kind = join["kind"];
					string table_name = join["table_name"];
					string alias_name = join["alias_name"];
					Collection filter = join["filter"];
					
					list res = this.convertFilter(filter);
					string where = res[0];
					data = data.concatIm(data, res[1]);
					
					if (kind == "left") sql ~= " LEFT JOIN ";
					else sql ~= " INNER JOIN ";
					
					$sql ~= this.prefix ~ table_name;
					if (alias_name != "") sql ~= " AS " ~ alias_name;
					$sql ~= " ON (" ~ where ~ ")";
					
					/* New line */
					sql ~= "\n";
				}
			}
			
			/* Add where */
			if (q._filter != null and q._filter.count() > 0)
			{
				list res = this.convertFilter(filter);
				string where = res[0];
				data = data.concatIm(data, res[1]);
				
				if (where != "") sql ~= " WHERE " . where;
				
				/* New line */
				sql ~= "\n";
			}
			
			/* Add order */
			if (q._order != null and q._order.count() > 0)
			{
				Collection order = array_map
				(
					(Collection item) => item[0] ~ " " ~ item[1],
					q._order
				);
				
				sql ~= " ORDER BY " ~ rs::join(",", order);
				
				/* New line */
				sql ~= "\n";
			}
			
			/* Add order */
			if (q._limit >= 0) sql ~= " LIMIT " ~ q._limit;
			if (q._limit >= 0 and q._start >= 0) sql ~= " OFFSET " ~ q._start;
			
			return [sql, data];
		}
		
		else if (q._kind == Query::QUERY_INSERT)
		{
			Vector keys = new Vector();
			Vector values = new Vector();
			
			q._data.each(
				(var value, string key) use (keys, values)
				{
					keys.push( "`" ~ key ~ "`" );
					values.push( ":" ~ key );
				}
			);
			
			/* Build sql */
			string sql = "INSERT INTO " ~ this.prefix ~ q._table_name . 
				" (" . rs::join(",", keys) . ") VALUES (" . rs::join(",", values) . ")"
			;
			
			return [sql, q._data];
		}
		
		else if (q._kind == Query::QUERY_UPDATE)
		{
			Vector update_arr = new Vector();
			Vector values = new Vector();
			Dict data = q._data;
			
			/* Build update */
			q._data.each(
				(var value, string key) use (keys, values)
				{
					update_arr.push( "`" ~ key ~ "`" = ":_update_" ~ key );
					data = data.setIm(":_update_" ~ key, value);
				}
			);
			
			/* Build where */
			list res = this.convertFilter(q._filter);
			string where_str = res[0];
			data = data.concat(res[1]);
			
			/* Build sql */
			string sql = "UPDATE " . this.prefix ~ q._table_name ~
				" SET " ~ rs::join(", ", update_arr) ~ " WHERE " ~ where_str;
			
			return [sql, data];
		}
		
		else if (q._kind == Query::QUERY_DELETE)
		{
			/* Build where */
			list res = this.convertFilter(q._filter);
			string where_str = res[0];
			Dict data = res[1];
			
			/* Delete item */
			string sql = "DELETE FROM " . q._table_name . " WHERE " . where_str;
			
			return [sql, data];
		}
		
		else if (q._kind == Query::QUERY_RAW)
		{
			return [q._sql, q._data];
		}
		
		return null;
	}
	
	
	/**
	 * Convert filter
	 */
	list convertFilter(Collection filter, int field_index = 0)
	{
		Vector where = new Vector();
		Map data = new Map();
		Collection allow_operations = ["=", "!=", ">=", "<=", "<", ">"];
		
		fn convert_key = string (string s) =>
			rs::replace(".", "_", s)
		;
		
		for (int i=0; i<filter.count(); i++)
		{
			list item = filter[i];
			string field_name = item[0];
			string op = item[1];
			var value = item[2];
			
			/* OR */
			if (field_name == "$or")
			{
				Vector where_or = new Vector();
				for (int j=0; j<value.count(); j++)
				{
					list res_or = this.convertFilter(value[j], field_index);
					where_or.push( res_or[0] );
					data.concat( res_or[1] );
					field_index = res_or[2];
				}
				
				where.push( "(" ~ rs::join(" OR ", where_or) ~ ")" );
				
				continue;
			}
			
			/* Check operation */
			if (allow_operations.indexOf(op) == -1)
			{
				op = "=";
			}
			
			if (value === null)
			{
				if (op == "!=")
					where.push( this.escape_field(field_name) ~ " is not null" );
					
				else
					where.push( this.escape_field(field_name) ~ " is null" );
			}
			
			else
			{
				string field_key = convert_key( "where_" ~ field_name ~ "_" ~ field_index );
				where.push( this.escape_field(field_name) ~ " " ~ op ~ " :" ~ field_key );
				data.set(field_key, value);
				field_index++;
			}
		}
		
		string where_str = rs::join(" AND ", where);
		
		return [where_str, data, field_index];
	}
	
	
	/**
	 * Escape
	 */
	string escape_field(item) => item;
}