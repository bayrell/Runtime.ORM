/*!
 *  Bayrell Runtime Library
 *
 *  (c) Copyright 2016-2023 "Ildar Bikmamatov" <support@bayrell.org>
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

namespace Runtime.ORM;

use Runtime.ORM.Connection;
use Runtime.ORM.Query;


class Cursor
{
	Connection conn = null;
	Query q = null;
	
	
	/**
	 * Constructor
	 */
	public void constructor(Connection conn)
	{
		this.conn = conn;
	}
	
	
	/**
	 * Returns found rows
	 */
	async int foundRows() => 0;
	
	
	/**
	 * Returns affected rows
	 */
	async int affectedRows() => 0;
	
	
	/**
	 * Returns last insert id
	 */
	async int lastInsertId() => 0;
	
	
	/**
	 * Execute sql query
	 */
	async Cursor executeSQL(string sql, Dict data = null)
	{
		return this;
	}
	
	
	/**
	 * Close query
	 */
	async Cursor close()
	{
		return this;
	}
	
	
	/**
	 * Fetch next row
	 */
	async Dict fetchDict() => null;
	
	
	/**
	 * Fetch next row
	 */
	async var fetch()
	{
		Dict row = await this.fetchDict();
		
		if (row and this.q and this.q._class_name_relation != "")
		{
			string class_name = this.q._class_name_relation;
			row = rtl::method(class_name, "newInstanceFromDatabase")( this.conn, row );
		}
		
		return row;
	}
	
	
	/**
	 * Fetch all rows
	 */
	async Collection fetchAll()
	{
		Vector<Dict> items = new Vector();
		while (true)
		{
			Dict row = await this.fetch();
			if (row == null)
			{
				break;
			}
			items.pushValue(row);
		}
		
		return items.toCollection();
	}
	
	
	/**
	 * Fetch variable
	 */
	async var fetchVar(string var_name)
	{
		Dict row = await this.fetchDict();
		if (row)
		{
			return row[var_name];
		}
		return null;
	}
}