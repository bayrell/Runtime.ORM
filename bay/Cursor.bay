/*!
 *  Bayrell Runtime Library
 *
 *  (c) Copyright 2016-2023 "Ildar Bikmamatov" <support@bayrell.org>
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

namespace Runtime.ORM;

use Runtime.math;
use Runtime.BaseObject;
use Runtime.ORM.Connection;
use Runtime.ORM.Query;
use Runtime.ORM.Relation;
use Runtime.ORM.RelationArray;


class Cursor extends BaseObject
{
	Connection conn = null;
	Query q = null;
	
	
	/**
	 * Constructor
	 */
	public void constructor(Connection conn)
	{
		parent();
		this.conn = conn;
	}
	
	
	/**
	 * Returns found rows
	 */
	async int foundRows() => 0;
	
	
	/**
	 * Returns affected rows
	 */
	async int affectedRows() => 0;
	
	
	/**
	 * Returns last insert id
	 */
	async int lastInsertId() => 0;
	
	
	/**
	 * Returns pages
	 */
	async int getPages()
	{
		int limit = 0;
		if (this.q) limit = this.q._limit;
		if (limit <= 0) return 0;
		int rows = await this.foundRows();
		return rows > 0 ? math::floor((rows - 1) / limit) + 1 : 0;
	}
	
	
	/**
	 * Returns page
	 */
	async int getPage()
	{
		int limit = 0;
		int offset = 0;
		if (this.q)
		{
			limit = this.q._limit;
			offset = this.q._start;
		}
		if (limit <= 0) return 0;
		if (offset <= 0) return 0;
		return math::floor(offset / limit);
	}
	
	
	/**
	 * Execute sql query
	 */
	async Cursor executeSQL(string sql, Dict data = null)
	{
		return this;
	}
	
	
	/**
	 * Close query
	 */
	async Cursor close()
	{
		return this;
	}
	
	
	/**
	 * Fetch next row
	 */
	async Dict fetchDict() => null;
	
	
	/**
	 * Fetch next row
	 */
	async Relation fetch()
	{
		Relation row = await this.fetchDict();
		if (!row) return null;
		
		string table_name = this.q._table_name;
		row = Relation::newInstanceFromDatabase(table_name, this.conn, row);
		
		return row;
	}
	
	
	/**
	 * Fetch all rows
	 */
	async RelationArray fetchAll()
	{
		RelationArray items = new RelationArray();
		while (true)
		{
			Dict row = await this.fetch();
			if (row == null)
			{
				break;
			}
			items.pushValue(row);
		}
		
		return items;
	}
	
	
	/**
	 * Fetch variable
	 */
	async var fetchVar(string var_name)
	{
		Dict row = await this.fetchDict();
		if (row)
		{
			return row[var_name];
		}
		return null;
	}
}