/*!
 *  Bayrell Runtime Library
 *
 *  (c) Copyright 2016-2023 "Ildar Bikmamatov" <support@bayrell.org>
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

namespace Runtime.ORM;

use Runtime.BaseStruct;
use Runtime.ORM.Connection;
use Runtime.ORM.Query;
use Runtime.ORM.QueryField;
use Runtime.ORM.Relation;
use Runtime.ORM.Annotations.ForeignKey;


class QueryResult extends Vector<Dict>
{
	Query q = null;
	Connection conn = null;
	
	
	/**
	 * Create new QueryResult
	 */
	void constructor()
	{
		parent();
	}
	
	
	/**
	 * Returns converted item
	 */
	Dict getItem(Dict item)
	{
		Dict item = this.get(item);
		item = this.convertItem(item);
		return item;
	}
	
	
	/**
	 * Convert item
	 */
	Dict convertItem(Dict item)
	{
		Vector fields = this.q._fields;
		
		for (int i=0; i<fields.count(); i++)
		{
			var field = fields[i];
			if (field instanceof QueryField)
			{
				item = field.annotation.fromDatabase(this.conn, item);
			}
		}
		
		return item;
	}
	
	
	/**
	 * Transform items to model
	 */
	Collection<BaseStruct> toModel(string class_name) => this
			.map( method this.convertItem )
			.map(
				BaseStruct (Dict item) use (class_name)
					=> rtl::newInstance(class_name, [item])
			)
			.toCollection()
		;
	
	
	/**
	 * Convert to Dict
	 */
	Collection<Dict> toDict(Collection fields = null) => this
		.map( method this.convertItem )
		.map(
			BaseStruct (Dict item) use (fields)
				=> (fields == null)
					? item.toDict()
					: item.intersect(fields)
		)
		.toCollection()
	;
	
	
	/**
	 * Transform item to Relation
	 */
	Relation toRelation()
	{
		string table_name = this.q._table_name;
		return this
			.map( method this.convertItem )
			.map(
				BaseStruct (Dict item) use (table_name)
					=> Relation::newInstance(table_name, [item])
			)
			.toCollection()
		;
	}
	
	
	/**
	 * Returns relation by index
	 */
	Relation getRelation(int index)
	{
		string table_name = this.q._table_name;
		Dict item = this.getItem(index);
		return Relation::newInstance(table_name, item);
	}
	
	
	/**
	 * Build query for resolve foreign key
	 */
	async Query resolveQuery(Connection conn, string key_name = "")
	{
		ForeignKey foreign_key = Relation::getForeignKey(key_name);
		Query q = await foreign_key.resolveQuery(conn, this);
		return q;
	}
	
	
	/**
	 * Resolve foreign key
	 */
	async QueryResult resolve(Connection conn, string key_name)
	{
		ForeignKey foreign_key = Relation::getForeignKey(key_name);
		rtl::assert(foreign_key, "Foreign key '" ~ key_name ~ "' not found");
		QueryResult items = await foreign_key.resolve(conn, this);
		return items;
	}
	
	
	/**
	 * Build query for reverse resolve foreign key
	 */
	async Query resolveReverseQuery(Connection conn, string key_name)
	{
		ForeignKey foreign_key = Relation::getForeignKey(key_name);
		rtl::assert(foreign_key, "Foreign key '" ~ key_name ~ "' not found");
		QueryResult items = await foreign_key.resolveReverseQuery(conn, this);
		return items;
	}
	
	
	/**
	 * Reverse resolve foreign key
	 */
	async QueryResult resolveReverse(Connection conn, string key_name)
	{
		ForeignKey foreign_key = Relation::getForeignKey(key_name);
		QueryResult items = await foreign_key.resolveReverse(conn, this);
		return items;
	}
	
	
	/**
	 * Resolve all
	 */
	async QueryResult resolveAll(Connection conn, string key_name)
	{
		ForeignKey foreign_key = Relation::getForeignKey(key_name);
		QueryResult items = await foreign_key.resolveAll(conn, this);
		return items;
	}
	
}